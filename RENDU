                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 3 novembre 2023, 23h59

Identité
--------
Nombre de binôme: 66
Nom, prénom 1: TAMDRARI, Yacine
Nom, prénom 2: LECONTE, Yohan


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

Oui la compilation et l'exécution du programme sur sudoku-4x4.cnf réussit

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

Oui la fonction filter_map est utilisée dans la fonction simplifie d'une part
pour supprimer les clauses qui ont le littéral avec lequel on simplifie les 
clauses et d'autres part pour supprimer la négation de ce littéral dans chaque
clause, pour plus de details veuillez voir les commentaires dans le fichier
dpll.ml

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

Pour la fonction unitaire on a utilisé la fonction find du module List pour
trouver une clause de taille 1 (avec la fonction List.length) dans l'ensemble
des clauses qui lève une exception 'Not_found' si aucune clause unitaire existe
et on a utilisé la fonction List.hd pour récupérer le seul littéral de la 
clause unitaire trouvé

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

La fonction pur transforme d'abord l'ensemble des clauses vers une liste de 
littéral avec List.flatten après elle parcourt cette liste en maintenant un 
ensemble des littéraux deja-vus et un ensemble des littéraux qu'on sait qu'ils 
ne sont pas pur et pour chaque littéral elle teste si on sait est-ce qu'il est 
non_pur puis si sa négation se trouve dans le reste des littéraux ou dans 
l'ensemble des littéraux deja-vus si c'est la cas alors ce littéral n'est pas 
pur et elle continue avec le littéral suivant.

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

Le solveur_split fait une recherche par énumeration de tout les cas possibles
sans utiliser les régles unitaire et pur donc prends plus de temps que le 
solveur_dpll_rec, pour la formule φ = (p∨r)∧(¬p)∧(¬q∨r) les deux solveurs 
auront des comportements différents

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

On a essayé d'améliorer le DPLL récursif dans le choix de branchement en 
utilisant l'heuristique MOMS (Maximum Occurrences in clauses of Minimum Size)
dont on a expliqué le code avec des commentaires et on a trouvé aussi qu'on 
peut utiliser le backtracking non-chronologique pour améliorer l'efficacité 
du branchement mais c'est un algorithme basé sur le DPLL qui s'appelle CDCL 
qui marcherait sur des examples bien complexes comme sudoku-9x9-god.cnf

On a aussi écrit un script avec python qui teste si l'intérprétation 
donnée par notre solveur_dpll_rec satisfait vraiment la CNF en format
DIMACS, exemple d'utilisation:
./dpll tictactoe.cnf > tictactoe.interp 
python check.py tictactoe.cnf tictactoe.interp

---

--fin du fichier RENDU--
